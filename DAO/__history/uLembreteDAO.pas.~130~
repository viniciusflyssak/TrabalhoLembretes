unit uLembreteDAO;

interface

uses
  uBaseDAO, uLembrete, FireDAC.Comp.Client, System.Generics.Collections,
  System.SysUtils;

type
  TLembreteDAO = class(TBaseDAO)

  private
    FListaLembrete: TObjectList<TLembrete>;
    procedure PreencherColecao(Ds: TFDQuery);

  public
    constructor Create;
    destructor Destroy;
    function Inserir(pLembrete: TLembrete): Boolean;
    function Deletar(pLembrete: TLembrete): Boolean;
    function Alterar(pLembrete: TLembrete): Boolean;
    function ListarPorTitulo(pConteudo: String): TObjectList<TLembrete>;
    function ObterDescricao(pConteudo: String): TObjectList<TLembrete>;
  end;

implementation

{ TLembreteDAO }

constructor TLembreteDAO.Create;
begin
  Inherited;
  FListaLembrete := TObjectList<TLembrete>.Create;
end;

destructor TLembreteDAO.Destroy;
begin
  Try
    Inherited;
    If Assigned(FListaLembrete) then
      FreeAndNil(FListaLembrete);
  except
    on e: Exception do
      raise Exception.Create(e.Message);
  End;
end;

function TLembreteDAO.Inserir(pLembrete: TLembrete): Boolean;
var
  SQL: String;
begin
  SQL := 'INSERT INTO lembretes(idlembrete, titulo, descricao, datahora) values ('
    + 'default' + ',' + QuotedStr(pLembrete.Titulo) + ',' +
    QuotedStr(pLembrete.Descricao) + ',' +
    QuotedStr(FormatDateTime('yyyy-mm-dd', pLembrete.Data)) +
    QuotedStr(FormatDateTime('HH:mm', pLembrete.Hora)) + ')';
  Result := ExecutarComando(SQL) > 0
end;

function TLembreteDAO.Alterar(pLembrete: TLembrete): Boolean;
var
  SQL: string;
begin
  SQL := ' UPDATE lembretes set titulo = ' + QuotedStr(pLembrete.Titulo) +
    ', descricao = ' + QuotedStr(pLembrete.Descricao) + ', datahora = ' +
    QuotedStr(FormatDateTime('yyyy-mm-dd', pLembrete.Data)) +
    QuotedStr(FormatDateTime('HH:mm', pLembrete.Hora)) + ' WHERE idlembrete = '
    + IntToStr(pLembrete.IDLembrete);

  Result := ExecutarComando(SQL) > 0;
end;

function TLembreteDAO.Deletar(pLembrete: TLembrete): Boolean;
var
  SQL: String;
begin
  SQL := ' DELETE FROM lembretes WHERE idlembrete = ' +
    IntToStr(pLembrete.IDLembrete);
  Result := ExecutarComando(SQL) > 0;
end;

function TLembreteDAO.ListarPorTitulo(pConteudo: string)
  : TObjectList<TLembrete>;
var
  SQL: String;
begin
  Result := Nil;
  SQL := 'SELECT F.idlembrete, F.titulo, F.descricao, ' +
    ' F.datahora FROM lembretes F';

  If pConteudo = '' then
  begin
    SQL := SQL + ' WHERE F.datahora >= ' +
      QuotedStr(FormatDateTime('yyyy-mm-dd', Now));
  end

  else

  begin
    SQL := SQL + ' WHERE F.titulo LIKE ' + QuotedStr('%' + pConteudo + '%');
  end;

  SQL := SQL + ' ORDER BY F.datahora ';
  FQuery := RetornarDataSet(SQL);

  If not(FQuery.IsEmpty) then
  begin
    PreencherColecao(FQuery);
    Result := FListaLembrete;
  end;
end;

function TLembreteDAO.ObterDescricao(pConteudo: String): TObjectList<TLembrete>;
var
  SQL: String;
begin
  Result := Nil;
  SQL := 'SELECT F.descricao FROM lembretes F WHERE id';
   FQuery := RetornarDataSet(SQL);
     If not(FQuery.IsEmpty) then
  begin
    PreencherColecao(FQuery);
    Result := FListaLembrete;
  end;
end;

procedure TLembreteDAO.PreencherColecao(Ds: TFDQuery);
var
  I: Integer;
begin
  I := 0;
  FListaLembrete.Clear;

  while not Ds.eof do
  begin
    FListaLembrete.Add(TLembrete.Create);
    FListaLembrete[I].IDLembrete := Ds.FieldByName('idlembrete').AsInteger;
    FListaLembrete[I].Titulo := Ds.FieldByName('titulo').AsString;
    FListaLembrete[I].Data := Ds.FieldByName('datahora').AsDateTime;

    Ds.Next;
    I := I + 1;
  end;

end;

end.
